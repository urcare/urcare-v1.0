import React, { useState, useEffect } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { useNavigate, useLocation } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import { UserFlowHandler } from "@/components/UserFlowHandler";
import { 
  CheckCircle, 
  Calendar,
  Heart,
  Settings,
  LogOut,
  Bell,
  Mic,
  Send,
  Paperclip,
  ChevronDown,
  X,
  FileText,
  Trash2,
  Moon,
  Sun,
  Eye,
  Activity,
  Shield
} from "lucide-react";
import { toast } from "sonner";
import { useFileUpload } from "@/hooks/useFileUpload";
import { useVoiceRecording } from "@/hooks/useVoiceRecording";
import { useDebounce } from "@/hooks/useDebounce";
// Removed throttle and performanceMonitor imports to fix debugger issue
import LazyImage from "@/components/LazyImage";
import { calculateHealthScore, getUserProfileForHealthScore } from "@/services/healthScoreService";
import { generateHealthPlans, saveSelectedHealthPlan } from "@/services/healthPlanService";
import AIProcessingPopup from "@/components/AIProcessingPopup";
import HealthPlansVerticalList from "@/components/HealthPlansVerticalList";
import HealthPlansDisplay from "@/components/HealthPlansDisplay";
import YourHealthPopup from "@/components/YourHealthPopup";
import FloatingChat from "@/components/FloatingChat";
import DynamicHealthSection from "@/components/DynamicHealthSection";
import TodaySchedule from "@/components/TodaySchedule";
import VoiceRecorder from "@/components/VoiceRecorder";
import ErrorBoundary from "@/components/ErrorBoundary";

interface HealthPlan {
  id: string;
  title: string;
  description: string;
  duration?: string;
  difficulty?: 'Beginner' | 'Intermediate' | 'Advanced';
  focusAreas?: string[];
  estimatedCalories?: number;
  equipment?: string[];
  benefits?: string[];
  activities?: {
    id: string;
    label: string;
    time: string;
  }[];
}

const Dashboard: React.FC = () => {
  const { user, profile, signOut } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();

  // Handle navigation state from health plan generation page
  useEffect(() => {
    if (location.state) {
      const { planSaved, selectedPlan, showTodaysSchedule, preserveHealthPlans, generatedPlans } = location.state;
      
      if (planSaved && selectedPlan) {
        // Plan was saved, update today's activities
        setSelectedPlan(selectedPlan);
        
        // Activities will be generated by the plan-activities function
        const activities = [];
        
        setTodaysActivities(activities);
        localStorage.setItem('todaysActivities', JSON.stringify(activities));
        setShowHealthPlans(false);
        
        toast.success(`Protocol "${selectedPlan.title}" is now active!`);
      } else if (preserveHealthPlans && generatedPlans) {
        // Preserve the generated plans when going back
        setHealthPlans(generatedPlans);
        setShowHealthPlans(true);
      }
    }
  }, [location.state]);
  
  // State management
  const [healthScore, setHealthScore] = useState<number>(0);
  const [healthScoreAnalysis, setHealthScoreAnalysis] = useState<string>('');
  const [healthScoreRecommendations, setHealthScoreRecommendations] = useState<string[]>([]);
  const [userInput, setUserInput] = useState<string>('');
  const [isProcessing, setIsProcessing] = useState<boolean>(false);
  const [aiError, setAiError] = useState<string>('');
  const [showHealthPlans, setShowHealthPlans] = useState<boolean>(false);
  const [healthPlans, setHealthPlans] = useState<HealthPlan[]>([]);
  const [healthScoreCalculated, setHealthScoreCalculated] = useState<boolean>(false);
  const [showFileManager, setShowFileManager] = useState<boolean>(false);
  const [isDarkMode, setIsDarkMode] = useState<boolean>(false);
  const [showNotificationDrawer, setShowNotificationDrawer] = useState<boolean>(false);
  const [showYourHealthPopup, setShowYourHealthPopup] = useState<boolean>(false);
  const [selectedPlan, setSelectedPlan] = useState<HealthPlan | null>(null);
  const [todaysActivities, setTodaysActivities] = useState<any[]>([]);
  const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set());
  const [showTips, setShowTips] = useState<boolean>(true);
  const [groqPlans, setGroqPlans] = useState<HealthPlan[]>([]);
  const [showGroqPlans, setShowGroqPlans] = useState<boolean>(false);
  const [profileImageError, setProfileImageError] = useState<boolean>(false);
  const [sequentialAIResult, setSequentialAIResult] = useState<any>(null);

  // Default health tips data
  const healthTips = [
    {
      id: 'hydration-tip',
      title: 'Stay Hydrated',
      time: 'All Day',
      category: 'Hydration',
      description: 'Drink at least 8 glasses of water throughout the day. Start your morning with a glass of water to kickstart your metabolism.',
      icon: '💧'
    },
    {
      id: 'sleep-tip',
      title: 'Quality Sleep',
      time: '22:00 - 06:00',
      category: 'Sleep',
      description: 'Aim for 7-9 hours of quality sleep. Keep your bedroom cool, dark, and quiet for optimal rest.',
      icon: '😴'
    },
    {
      id: 'exercise-tip',
      title: 'Daily Movement',
      time: '30 min',
      category: 'Exercise',
      description: 'Incorporate at least 30 minutes of physical activity daily. Even a brisk walk can make a significant difference.',
      icon: '🏃‍♂️'
    }
  ];

  // Debounced user input for better performance
  const debouncedUserInput = useDebounce(userInput, 300);

  // File upload hook
  const {
    uploadedFiles,
    isUploading,
    fileInputRef,
    openFileDialog,
    handleFileUpload,
    removeFile,
    clearAllFiles,
    getFileSize
  } = useFileUpload({
    acceptedTypes: ['.txt', '.pdf'],
    maxSize: 10,
    maxFiles: 5
  });

  // Voice recording hook
  const {
    isRecording,
    isSupported: isVoiceSupported,
    transcript,
    startRecording,
    stopRecording,
    clearTranscript
  } = useVoiceRecording();
  
  const getFirstName = () => {
    // Debug: Check if profile is an error object
    if (profile && typeof profile === 'object' && ('success' in profile || 'error' in profile)) {
      console.error('❌ Profile is an error object:', profile);
      return "User";
    }
    
    // Additional safety check for any object that might be rendered
    if (profile && typeof profile === 'object' && !('full_name' in profile) && !('id' in profile)) {
      console.error('❌ Profile is not a valid user profile object:', profile);
      return "User";
    }
    
    if (profile?.full_name) {
      return profile.full_name.split(" ")[0];
    }
    return "User";
  };

  // Helper function to safely get profile data
  const getSafeProfile = () => {
    if (!profile || typeof profile !== 'object') return null;
    if ('success' in profile || 'error' in profile) return null;
    if (!('full_name' in profile) && !('id' in profile)) return null;
    return profile;
  };

  // Helper function to safely render any value as string
  const safeRender = (value: any): string => {
    if (value === null || value === undefined) return '';
    if (typeof value === 'string') return value;
    if (typeof value === 'number') return value.toString();
    if (typeof value === 'boolean') return value.toString();
    if (typeof value === 'object') {
      console.error('❌ Attempted to render object as string:', value);
      return '';
    }
    return String(value);
  };

  // Debug: Log user data to see what we're getting from Google OAuth
  useEffect(() => {
    if (user) {
      // Reset profile image error when user changes
      setProfileImageError(false);
    }
  }, [user]);

  // Debug: Log profile object to see what we're getting
  useEffect(() => {
    if (profile) {
      if (typeof profile === 'object' && ('success' in profile || 'error' in profile)) {
        console.error('❌ Profile is an error object! This will cause React rendering errors.');
      }
    }
  }, [profile]);

  // Debug: Log selected plan changes
  useEffect(() => {
    if (selectedPlan) {
    }
  }, [selectedPlan]);

  // Prevent debugger pauses
  useEffect(() => {
    if (typeof window !== 'undefined') {
      // Add error handling to prevent debugger pauses
      window.addEventListener('error', (e) => {
        // Silently handle errors to prevent debugger pauses
        return false;
      });
      
      // Handle unhandled promise rejections
      window.addEventListener('unhandledrejection', (e) => {
        // Silently handle promise rejections to prevent debugger pauses
        e.preventDefault();
        return false;
      });
    }
  }, []);


  // Dark mode toggle
  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode);
    // Store preference in localStorage
    localStorage.setItem('darkMode', (!isDarkMode).toString());
  };

  // Load dark mode preference on mount
  useEffect(() => {
    const savedDarkMode = localStorage.getItem('darkMode');
    if (savedDarkMode) {
      setIsDarkMode(savedDarkMode === 'true');
    }
  }, []);

  // Apply dark mode class to document
  useEffect(() => {
    if (isDarkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [isDarkMode]);

  const handleLogout = async () => {
    try {
      await signOut();
    } catch (error) {
      console.error("Error signing out:", error);
      // Fallback redirect even if signOut fails
      window.location.href = "/";
    }
  };

  const handleSendMessage = async () => {
    if (!user) {
      toast.error("Please log in to use this feature");
      return;
    }

    if (!userInput.trim() && uploadedFiles.length === 0 && !transcript.trim()) {
      toast.error("Please enter a message, upload files, or record voice");
      return;
    }

    setIsProcessing(true);
    setShowHealthPlans(false);
    setShowGroqPlans(false);
    setShowTips(false); // Switch from tips to plans when user inputs goals

    try {
      // Get user profile for health score calculation
      const profileResult = await getUserProfileForHealthScore(user.id);
      
      let userProfile;
      if (!profileResult.success) {
        console.warn("Failed to fetch user profile, using mock data:", profileResult.error);
        // Use mock profile data for admin or when profile fetch fails
        userProfile = {
          id: user.id,
          full_name: user.user_metadata?.full_name || 'User',
          age: 30,
          gender: 'Not specified',
          height_cm: '170',
          weight_kg: '70',
          blood_group: 'Not specified',
          chronic_conditions: [],
          medications: [],
          health_goals: ['General wellness'],
          diet_type: 'Balanced',
          workout_time: 'Morning',
          sleep_time: '22:00',
          wake_up_time: '06:00'
        };
      } else {
        userProfile = profileResult.profile;
      }
      
      // Use Supabase health-plans function to generate personalized plans
      const primaryGoal = userInput.trim() || transcript.trim() || "Boost energy, improve sleep, reduce stress";
      
      console.log('🎯 Generating personalized health plans based on user input:', primaryGoal);
      
      const { data, error } = await supabase.functions.invoke('health-plans', {
        body: {
          userProfile: userProfile,
          healthScore: healthScore,
          userInput: primaryGoal,
          uploadedFiles: uploadedFiles,
          voiceTranscript: transcript
        }
      });

      if (error) {
        console.error('❌ Supabase health-plans function failed:', error);
        throw new Error(`Failed to generate health plans: ${error.message}`);
      }

      console.log('✅ Health plans generated successfully:', data);

      setSequentialAIResult(data);
      
      // Convert Supabase health-plans response to HealthPlan format for display
      const healthPlans: HealthPlan[] = data.plans?.map((plan: any, index: number) => ({
        id: plan.id || `plan_${index + 1}`,
        title: plan.title || plan.name || `Health Plan ${index + 1}`,
        name: plan.title || plan.name || `Health Plan ${index + 1}`,
        description: plan.description || 'AI-generated personalized health plan',
        duration: plan.duration || '12-16 weeks',
        difficulty: plan.difficulty || 'Beginner',
        focusAreas: plan.focusAreas || plan.focus_areas || ['General wellness'],
        estimatedCalories: plan.estimatedCalories || plan.calories || 2000,
        calorieTarget: plan.calorieTarget || plan.calories || 2000,
        macros: plan.macros || { protein: 30, carbs: 40, fats: 30 },
        workoutFrequency: plan.workoutFrequency || '3 days/week',
        workoutStyle: plan.workoutStyle || 'balanced',
        timeline: plan.timeline || {
          'week1-2': 'Initial adaptation phase',
          'week3-4': 'Building momentum',
          'month2': 'Significant progress',
          'month3': 'Advanced results'
        },
        impacts: plan.impacts || {
          primaryGoal: plan.title || 'Achieve your main health goal',
          energy: 'Increased energy levels',
          physical: 'Improved physical condition',
          mental: 'Better mental clarity',
          sleep: 'Enhanced sleep quality'
        },
        scheduleConstraints: plan.scheduleConstraints || {
          workoutWindows: ['06:00-07:30', '18:00-20:00'],
          mealPrepComplexity: 'medium',
          recoveryTime: '8 hours sleep minimum'
        },
        equipment: plan.equipment || ['Basic equipment'],
        benefits: plan.benefits || (plan.impacts ? Object.values(plan.impacts) : ['Improved health']),
        activities: [] // Will be populated when plan is selected
      })) || [];

      setGroqPlans(healthPlans);
      setHealthPlans(healthPlans); // Also set healthPlans for AIResponseDisplay
      setShowGroqPlans(true);
      setAiError(''); // Clear any previous errors

      // Clear input
      setUserInput('');
      clearAllFiles();
      clearTranscript();

      toast.success(`Generated ${healthPlans.length} personalized health plans based on your goal: "${primaryGoal}"`);

    } catch (error) {
      console.error("Error processing health request:", error);
      setAiError(error instanceof Error ? error.message : "Failed to process AI request");
      toast.error(error instanceof Error ? error.message : "Failed to process request");
    } finally {
      setIsProcessing(false);
    }
  };

  const handleSelectPlan = async (plan: HealthPlan) => {
    if (!user) {
      toast.error("Please log in to select a protocol");
      return;
    }

    try {
      setIsProcessing(true);
      toast.info("Generating detailed daily schedule...");

      console.log('🎯 Generating detailed schedule for plan:', plan.title);
      
      // Get user profile for schedule generation
      const profileResult = await getUserProfileForHealthScore(user.id);
      if (!profileResult.success) {
        throw new Error('Failed to get user profile for schedule generation');
      }

      // Call Supabase plan-activities function to generate detailed daily schedule
      console.log('🤖 Calling plan-activities function with:', {
        selectedPlan: plan,
        userProfile: profileResult.profile
      });
      
      const { data, error } = await supabase.functions.invoke('plan-activities', {
        body: {
          selectedPlan: plan,
          userProfile: profileResult.profile
        }
      });

      if (error) {
        console.error('❌ Supabase plan-activities function failed:', error);
        throw new Error(`Failed to generate schedule: ${error.message}`);
      }

      console.log('✅ Plan Activities AI Response:', data);
      console.log('📋 Activities Count:', data.dailySchedule?.length || 0);
      console.log('🤖 Provider:', data.meta?.provider || 'Unknown');
      
      if (data.dailySchedule?.length > 0) {
        console.log('📅 Generated Activities:');
        data.dailySchedule.forEach((activity, i) => {
          console.log(`  ${i + 1}. ${activity.time} - ${activity.activity} (${activity.category})`);
          console.log(`     Duration: ${activity.duration} | Calories: ${activity.calories}`);
          console.log(`     Instructions: ${activity.instructions?.length || 0} steps`);
          if (activity.instructions?.length > 0) {
            activity.instructions.forEach((instruction, idx) => {
              console.log(`       ${idx + 1}. ${instruction}`);
            });
          }
        });
      }

      // Convert the response to activities format
      let activities = [];
      
      if (data.dailySchedule && Array.isArray(data.dailySchedule)) {
        // Handle the new response format from plan-activities function
        activities = data.dailySchedule.map(activity => ({
          id: activity.id || `activity-${Math.random().toString(36).substr(2, 9)}`,
          title: activity.activity || activity.title || 'Activity',
          time: activity.time || '09:00',
          duration: activity.duration || '30 min',
          type: activity.category || 'exercise',
          details: activity.details || '',
          instructions: Array.isArray(activity.instructions) ? activity.instructions : [],
          equipment: activity.equipment || [],
          difficulty: activity.difficulty || plan.difficulty || 'Beginner',
          calories: activity.calories || 200
        }));
      } else if (data.weeklySchedules?.[0]?.dailySchedules?.[0]) {
        // Fallback to old format if needed
        activities = Object.values(data.weeklySchedules[0].dailySchedules[0]).filter(item => 
          typeof item === 'object' && item !== null
        ).flatMap(daySchedule => {
          const dayActivities = [];
          
          // Add morning routine activities
          if (daySchedule.morningRoutine) {
            dayActivities.push({
              id: `morning-${Math.random().toString(36).substr(2, 9)}`,
              title: 'Morning Routine',
              time: daySchedule.morningRoutine.wakeUpTime || '06:00',
              duration: '30 min',
              type: 'mindfulness',
              details: daySchedule.morningRoutine.hydration || 'Start your day with hydration',
              instructions: ['Wake up at the scheduled time', 'Drink water', 'Prepare for the day'],
              equipment: [],
              difficulty: 'Easy',
              calories: 0
            });
          }

          // Add workout activities
          if (daySchedule.workout) {
            dayActivities.push({
              id: `workout-${Math.random().toString(36).substr(2, 9)}`,
              title: daySchedule.workout.exercises?.[0]?.name || 'Workout Session',
              time: daySchedule.workout.time || '18:00',
              duration: daySchedule.workout.duration || '45 min',
              type: 'exercise',
              details: daySchedule.workout.exercises?.[0]?.instructions || 'Complete your workout routine',
              instructions: daySchedule.workout.exercises?.map(ex => ex.instructions) || [],
              equipment: daySchedule.workout.equipment || [],
              difficulty: plan.difficulty || 'Beginner',
              calories: daySchedule.workout.caloriesBurned || 300
            });
          }

          // Add meal activities
          if (daySchedule.meals) {
            Object.entries(daySchedule.meals).forEach(([mealType, mealData]) => {
              if (mealData && typeof mealData === 'object' && mealData.time) {
                dayActivities.push({
                  id: `${mealType}-${Math.random().toString(36).substr(2, 9)}`,
                  title: mealType.charAt(0).toUpperCase() + mealType.slice(1),
                  time: mealData.time,
                  duration: '30 min',
                  type: 'meal',
                  details: mealData.menu || `${mealType} meal`,
                  instructions: ['Eat mindfully', 'Follow the meal plan', 'Stay hydrated'],
                  equipment: [],
                  difficulty: 'Easy',
                  calories: mealData.calories || 400
                });
              }
            });
          }

          return dayActivities;
        });
      }
      
      // If no activities generated, show empty state
      if (activities.length === 0) {
        console.warn('⚠️ No activities generated from plan-activities function');
        activities = [];
      }

      const detailedPlan = {
        ...plan,
        activities: activities
      };

      console.log('🔍 Dashboard - Setting selected plan with activities:', detailedPlan.activities?.length || 0);
      console.log('🔍 Dashboard - First activity:', detailedPlan.activities?.[0]);
      setSelectedPlan(detailedPlan);
      const result = await saveSelectedHealthPlan(user.id, detailedPlan);
      
      if (result.success) {
        toast.success(`Plan "${plan.title}" is now active with detailed schedule!`);
        
        // Update today's activities based on generated schedule
        if (detailedPlan.activities && detailedPlan.activities.length > 0) {
          const activitiesWithTimestamps = detailedPlan.activities.map(activity => ({
            ...activity,
            id: activity.id || Math.random().toString(36).substr(2, 9),
            completed: false,
            timestamp: new Date().toISOString()
          }));
          setTodaysActivities(activitiesWithTimestamps);
          
          // Save to localStorage for persistence
          localStorage.setItem('todaysActivities', JSON.stringify(activitiesWithTimestamps));
        }
        
        // Hide the health plans and show the updated Today's Schedule
        setShowHealthPlans(false);
        setShowGroqPlans(false);
        
        // Navigate to health plan generation page
        navigate('/health-plan-generation', { state: { selectedPlan: detailedPlan } });
      } else {
        throw new Error(result.error || "Failed to save selected plan");
      }
    } catch (error) {
      console.error("Error selecting plan:", error);
      toast.error(error instanceof Error ? error.message : "Failed to select plan");
    } finally {
      setIsProcessing(false);
    }
  };

  const handleGroqPlanSelect = async (plan: HealthPlan) => {
    if (!user) {
      toast.error("Please log in to select a protocol");
      return;
    }

    try {
      setIsProcessing(true);
      toast.info("Generating detailed daily schedule...");

      console.log('🎯 Generating detailed schedule for Groq plan:', plan.title);
      
      // Get user profile for schedule generation
      const profileResult = await getUserProfileForHealthScore(user.id);
      if (!profileResult.success) {
        throw new Error('Failed to get user profile for schedule generation');
      }

      // Call Supabase plan-activities function to generate detailed daily schedule
      console.log('🤖 Calling plan-activities function with:', {
        selectedPlan: plan,
        userProfile: profileResult.profile
      });
      
      const { data, error } = await supabase.functions.invoke('plan-activities', {
        body: {
          selectedPlan: plan,
          userProfile: profileResult.profile
        }
      });

      if (error) {
        console.error('❌ Supabase plan-activities function failed:', error);
        throw new Error(`Failed to generate schedule: ${error.message}`);
      }

      console.log('✅ Plan Activities AI Response:', data);
      console.log('📋 Activities Count:', data.dailySchedule?.length || 0);
      console.log('🤖 Provider:', data.meta?.provider || 'Unknown');
      
      if (data.dailySchedule?.length > 0) {
        console.log('📅 Generated Activities:');
        data.dailySchedule.forEach((activity, i) => {
          console.log(`  ${i + 1}. ${activity.time} - ${activity.activity} (${activity.category})`);
          console.log(`     Duration: ${activity.duration} | Calories: ${activity.calories}`);
          console.log(`     Instructions: ${activity.instructions?.length || 0} steps`);
          if (activity.instructions?.length > 0) {
            activity.instructions.forEach((instruction, idx) => {
              console.log(`       ${idx + 1}. ${instruction}`);
            });
          }
        });
      }

      // Convert the response to activities format (same logic as handleSelectPlan)
      let activities = [];
      
      if (data.dailySchedule && Array.isArray(data.dailySchedule)) {
        // Handle the new response format from plan-activities function
        activities = data.dailySchedule.map(activity => ({
          id: activity.id || `activity-${Math.random().toString(36).substr(2, 9)}`,
          title: activity.activity || activity.title || 'Activity',
          time: activity.time || '09:00',
          duration: activity.duration || '30 min',
          type: activity.category || 'exercise',
          details: activity.details || '',
          instructions: Array.isArray(activity.instructions) ? activity.instructions : [],
          equipment: activity.equipment || [],
          difficulty: activity.difficulty || plan.difficulty || 'Beginner',
          calories: activity.calories || 200
        }));
      } else if (data.weeklySchedules?.[0]?.dailySchedules?.[0]) {
        // Fallback to old format if needed
        activities = Object.values(data.weeklySchedules[0].dailySchedules[0]).filter(item => 
          typeof item === 'object' && item !== null
        ).flatMap(daySchedule => {
          const dayActivities = [];
          
          // Add morning routine activities
          if (daySchedule.morningRoutine) {
            dayActivities.push({
              id: `morning-${Math.random().toString(36).substr(2, 9)}`,
              title: 'Morning Routine',
              time: daySchedule.morningRoutine.wakeUpTime || '06:00',
              duration: '30 min',
              type: 'mindfulness',
              details: daySchedule.morningRoutine.hydration || 'Start your day with hydration',
              instructions: ['Wake up at the scheduled time', 'Drink water', 'Prepare for the day'],
              equipment: [],
              difficulty: 'Easy',
              calories: 0
            });
          }

          // Add workout activities
          if (daySchedule.workout) {
            dayActivities.push({
              id: `workout-${Math.random().toString(36).substr(2, 9)}`,
              title: daySchedule.workout.exercises?.[0]?.name || 'Workout Session',
              time: daySchedule.workout.time || '18:00',
              duration: daySchedule.workout.duration || '45 min',
              type: 'exercise',
              details: daySchedule.workout.exercises?.[0]?.instructions || 'Complete your workout routine',
              instructions: daySchedule.workout.exercises?.map(ex => ex.instructions) || [],
              equipment: daySchedule.workout.equipment || [],
              difficulty: plan.difficulty || 'Beginner',
              calories: daySchedule.workout.caloriesBurned || 300
            });
          }

          // Add meal activities
          if (daySchedule.meals) {
            Object.entries(daySchedule.meals).forEach(([mealType, mealData]) => {
              if (mealData && typeof mealData === 'object' && mealData.time) {
                dayActivities.push({
                  id: `${mealType}-${Math.random().toString(36).substr(2, 9)}`,
                  title: mealType.charAt(0).toUpperCase() + mealType.slice(1),
                  time: mealData.time,
                  duration: '30 min',
                  type: 'meal',
                  details: mealData.menu || `${mealType} meal`,
                  instructions: ['Eat mindfully', 'Follow the meal plan', 'Stay hydrated'],
                  equipment: [],
                  difficulty: 'Easy',
                  calories: mealData.calories || 400
                });
              }
            });
          }

          return dayActivities;
        });
      }
      
      // If no activities generated, show empty state
      if (activities.length === 0) {
        console.warn('⚠️ No activities generated from plan-activities function');
        activities = [];
      }

      const detailedPlan = {
        ...plan,
        activities: activities
      };

      console.log('🔍 Dashboard - Setting selected plan with activities:', detailedPlan.activities?.length || 0);
      console.log('🔍 Dashboard - First activity:', detailedPlan.activities?.[0]);
      setSelectedPlan(detailedPlan);
      const result = await saveSelectedHealthPlan(user.id, detailedPlan);
      
      if (result.success) {
        toast.success(`Plan "${plan.title}" is now active with detailed schedule!`);
        
        // Update today's activities based on generated schedule
        if (detailedPlan.activities && detailedPlan.activities.length > 0) {
          const activitiesWithTimestamps = detailedPlan.activities.map(activity => ({
            ...activity,
            id: activity.id || Math.random().toString(36).substr(2, 9),
            completed: false,
            timestamp: new Date().toISOString()
          }));
          setTodaysActivities(activitiesWithTimestamps);
          
          // Save to localStorage for persistence
          localStorage.setItem('todaysActivities', JSON.stringify(activitiesWithTimestamps));
        }
        
        // Hide the health plans and show the updated Today's Schedule
        setShowGroqPlans(false);
      } else {
        throw new Error(result.error || "Failed to save selected plan");
      }
    } catch (error) {
      console.error("Error selecting plan:", error);
      toast.error(error instanceof Error ? error.message : "Failed to select plan");
    } finally {
      setIsProcessing(false);
    }
  };

  const handleBackToGroqPlans = () => {
    setSelectedPlan(null);
    setShowGroqPlans(true);
  };


  const handleViewPlanDetails = (plan?: HealthPlan) => {
    const planToView = plan || selectedPlan;
    if (planToView) {
      navigate('/health-plan-generation', { state: { selectedPlan: planToView } });
    } else {
      toast.error("No protocol selected");
    }
  };

  const handleVoiceToggle = () => {
    if (isRecording) {
      stopRecording();
    } else {
      startRecording();
    }
  };

  const toggleExpanded = (itemId: string) => {
    setExpandedItems(prev => {
      const newSet = new Set(prev);
      if (newSet.has(itemId)) {
        newSet.delete(itemId);
      } else {
        newSet.add(itemId);
      }
      return newSet;
    });
  };

  // Update user input with voice transcript
  useEffect(() => {
    if (transcript) {
      setUserInput(prev => prev + (prev ? ' ' : '') + transcript);
    }
  }, [transcript]);

  // Load today's activities from localStorage on mount
  useEffect(() => {
    const savedActivities = localStorage.getItem('todaysActivities');
    if (savedActivities) {
      try {
        setTodaysActivities(JSON.parse(savedActivities));
      } catch (error) {
        console.error('Failed to parse saved activities:', error);
      }
    }
  }, []);

  // Calculate health score on component mount (only once)
  useEffect(() => {
    const calculateInitialHealthScore = async () => {
      if (user && profile && !healthScoreCalculated) {
        try {
          console.log('🔍 Calculating health score (first time only)...', { user: user.id, profile: profile.id });
          setHealthScoreCalculated(true); // Prevent duplicate calls
          
          const profileResult = await getUserProfileForHealthScore(user.id);
          if (profileResult.success) {
            const scoreResult = await calculateHealthScore({ userProfile: profileResult.profile });
            if (scoreResult.success && scoreResult.healthScore) {
              setHealthScore(scoreResult.healthScore);
              
              // Handle analysis object properly
              let analysisText = '';
              if (typeof scoreResult.analysis === 'string') {
                analysisText = scoreResult.analysis;
              } else if (scoreResult.analysis && typeof scoreResult.analysis === 'object') {
                // Convert analysis object to readable text
                analysisText = scoreResult.analysis.overall || '';
                if (scoreResult.analysis.strengths && scoreResult.analysis.strengths.length > 0) {
                  analysisText += `\n\nStrengths: ${scoreResult.analysis.strengths.join(', ')}`;
                }
                if (scoreResult.analysis.areasForImprovement && scoreResult.analysis.areasForImprovement.length > 0) {
                  analysisText += `\n\nAreas for Improvement: ${scoreResult.analysis.areasForImprovement.join(', ')}`;
                }
              }
              
              setHealthScoreAnalysis(analysisText);
              setHealthScoreRecommendations(scoreResult.recommendations || []);
              setAiError('');
              
              // Store AI health data in localStorage for HealthContentNew component
              const aiHealthData = {
                healthScore: scoreResult.healthScore,
                healthScoreAnalysis: analysisText,
                healthScoreRecommendations: scoreResult.recommendations || []
              };
              localStorage.setItem('aiHealthData', JSON.stringify(aiHealthData));
            } else {
              setHealthScore(75);
              setHealthScoreAnalysis('Unable to generate AI analysis');
              setHealthScoreRecommendations(['Please try again later']);
            }
          }
        } catch (error) {
          console.error('Failed to calculate initial health score:', error);
          // Set a default health score if calculation fails
          setHealthScore(75);
          setHealthScoreAnalysis('Unable to generate AI analysis');
          setHealthScoreRecommendations(['Please try again later']);
        }
      }
    };

    calculateInitialHealthScore();
  }, [user, profile, healthScoreCalculated]);

  return (
    <UserFlowHandler>
      <ErrorBoundary>
        <div className={`min-h-screen transition-colors duration-300 ${
          isDarkMode 
            ? 'bg-gradient-to-br from-gray-900 to-gray-800' 
            : 'bg-gradient-to-br from-[#88ba82] to-[#95c190]'
        }`}>
      <div className="max-w-md mx-auto pb-6">
        {/* Header Section - White with Rounded Bottom */}
        <div className={`rounded-b-[2rem] px-4 sm:px-6 py-4 shadow-lg transition-colors duration-300 ${
          isDarkMode ? 'bg-gray-800' : 'bg-white'
        }`}>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              {/* Profile Image Container */}
              <div className="relative">
                <div className="w-12 h-12 sm:w-14 sm:h-14 rounded-full border-3 border-gray-200 shadow-md overflow-hidden bg-gradient-to-br from-[#88ba82] to-[#95c190] flex items-center justify-center">
                  {(() => {
                    // Try to get profile image from various sources
                    const avatarUrl = 
                      user?.user_metadata?.avatar_url ||
                      user?.user_metadata?.picture ||
                      user?.user_metadata?.photo_url ||
                      user?.user_metadata?.avatar ||
                      user?.user_metadata?.image ||
                      user?.user_metadata?.profile_image ||
                      user?.app_metadata?.avatar_url ||
                      user?.app_metadata?.picture ||
                      user?.app_metadata?.photo_url ||
                      user?.app_metadata?.avatar ||
                      user?.app_metadata?.image ||
                      user?.app_metadata?.profile_image;
                    
                    if (avatarUrl && !profileImageError) {
                      return (
                        <LazyImage
                          src={avatarUrl}
                          alt="Profile"
                          className="w-full h-full object-cover"
                          onError={() => {
                            // Set error state to show initials
                            setProfileImageError(true);
                          }}
                        />
                      );
                    }
                    
                    // Show initials by default or when image fails
                    return (
                      <div className="w-full h-full flex items-center justify-center text-white font-bold text-lg sm:text-xl">
                        {safeRender(getFirstName()).charAt(0).toUpperCase() || 'U'}
                      </div>
                    );
                  })()}
                </div>
                {/* Online status indicator */}
                <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 border-2 border-white rounded-full"></div>
              </div>
              
              {/* User Info Container */}
              <div className="flex flex-col min-w-0 flex-1">
                <h1 className={`text-lg font-semibold transition-colors duration-300 truncate ${
                  isDarkMode ? 'text-white' : 'text-gray-800'
                }`}>
                  Hi {safeRender(getFirstName())}
                </h1>
                <p className={`text-sm transition-colors duration-300 ${
                  isDarkMode ? 'text-gray-300' : 'text-gray-600'
                }`}>
                  Welcome back!
                </p>
              </div>
            </div>
            <div className="flex items-center gap-2 sm:gap-3">
              <button 
                onClick={handleLogout}
                className={`w-8 h-8 sm:w-10 sm:h-10 rounded-full flex items-center justify-center transition-colors duration-300 ${
                  isDarkMode 
                    ? 'bg-gray-700 hover:bg-gray-600' 
                    : 'bg-gray-100 hover:bg-gray-200'
                }`}
              >
                <LogOut className="w-4 h-4 sm:w-5 sm:h-5 text-red-600" />
              </button>
              <button 
                onClick={() => setShowNotificationDrawer(!showNotificationDrawer)}
                className={`w-8 h-8 sm:w-10 sm:h-10 rounded-full flex items-center justify-center transition-colors duration-300 ${
                  isDarkMode 
                    ? 'bg-gray-700 hover:bg-gray-600' 
                    : 'bg-gray-100 hover:bg-gray-200'
                }`}
              >
                <Bell className="w-4 h-4 sm:w-5 sm:h-5 text-gray-600" />
              </button>
            </div>
          </div>
        </div>

        {/* Health Score Section - Transparent Blur */}
        <div className="max-w-md mx-auto px-4 sm:px-6">
          <div className={`backdrop-blur-md py-4 px-4 shadow-lg rounded-[2rem] mt-2 transition-colors duration-300 ${
            isDarkMode 
              ? 'bg-gray-800/20' 
              : 'bg-white/20'
          }`}>
            <div className="flex items-center justify-between gap-4">
              {/* Health Score */}
              <div className="flex-shrink-0">
                <div>
                  <h2 className={`text-sm font-medium mb-2 text-center transition-colors duration-300 ${
                    isDarkMode ? 'text-gray-200' : 'text-white'
                  }`}>
                    HEALTH SCORE
                  </h2>
                  <div className={`w-14 h-14 sm:w-16 sm:h-16 border-2 rounded-full flex items-center justify-center transition-colors duration-300 ${
                    isDarkMode 
                      ? 'border-gray-400/50' 
                      : 'border-white/50'
                  }`}>
                    <span className={`text-xl sm:text-2xl font-bold transition-colors duration-300 ${
                      isDarkMode ? 'text-gray-200' : 'text-white'
                    }`}>
                      {healthScore}
                    </span>
                  </div>
                </div>
              </div>
              
              {/* Selected Plan or Call-to-Action */}
              <div className="flex-1 min-w-0">
                <div className="text-right">
                  <h3 className={`text-xs font-medium mb-1 transition-colors duration-300 ${
                    isDarkMode ? 'text-gray-300' : 'text-white/80'
                  }`}>
                    {selectedPlan ? 'SELECTED PLAN' : 'YOUR PLAN'}
                  </h3>
                  <p className={`text-sm font-semibold transition-colors duration-300 truncate ${
                    isDarkMode ? 'text-gray-100' : 'text-white'
                  }`}>
                    {selectedPlan ? selectedPlan.title : 'Generate Your Plan'}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Input/Chat Section */}
        <div className="max-w-md mx-auto px-4 sm:px-6 mt-3">
          <div className={`backdrop-blur-md rounded-3xl p-2 shadow-lg border-2 transition-colors duration-300 ${
            isDarkMode 
              ? 'bg-gray-700/90 border-gray-500/50' 
              : 'bg-white/90 border-gray-300/60'
          }`}>
            <textarea 
              value={userInput}
              onChange={(e) => setUserInput(e.target.value)}
              placeholder="Set your health goals or ask for advice..."
              className={`w-full bg-transparent text-sm focus:outline-none resize-none min-h-[40px] transition-colors duration-300 border-2 rounded-2xl px-3 py-2 mb-2 ${
                isDarkMode 
                  ? 'text-gray-200 placeholder-gray-400 border-gray-600/50 focus:border-gray-500' 
                  : 'text-gray-800 placeholder-gray-500 border-gray-300/60 focus:border-gray-400'
              }`}
              rows={2}
            />
            
            {/* Voice transcript display */}
            {transcript && (
              <div className={`mt-2 p-2 rounded-lg border transition-colors duration-300 ${
                isDarkMode 
                  ? 'bg-blue-900/50 border-blue-700' 
                  : 'bg-blue-50 border-blue-200'
              }`}>
                <p className={`text-xs transition-colors duration-300 ${
                  isDarkMode ? 'text-blue-300' : 'text-blue-700'
                }`}>
                  <strong>Voice:</strong> {transcript}
                </p>
              </div>
            )}

            {/* Uploaded files display */}
            {uploadedFiles.length > 0 && (
              <div className="mt-2 space-y-1">
                {uploadedFiles.map((file) => (
                  <div key={file.id} className={`flex items-center justify-between p-2 rounded-lg transition-colors duration-300 ${
                    isDarkMode ? 'bg-gray-600' : 'bg-gray-50'
                  }`}>
                    <div className="flex items-center space-x-2">
                      <FileText className={`w-4 h-4 transition-colors duration-300 ${
                        isDarkMode ? 'text-gray-400' : 'text-gray-500'
                      }`} />
                      <span className={`text-xs transition-colors duration-300 ${
                        isDarkMode ? 'text-gray-300' : 'text-gray-700'
                      }`}>
                        {file.name}
                      </span>
                      <span className={`text-xs transition-colors duration-300 ${
                        isDarkMode ? 'text-gray-400' : 'text-gray-500'
                      }`}>
                        ({getFileSize(file.size)})
                      </span>
                    </div>
                    <button
                      onClick={() => removeFile(file.id)}
                      className="text-red-500 hover:text-red-700 transition-colors duration-300"
                    >
                      <X className="w-4 h-4" />
                    </button>
                  </div>
                ))}
              </div>
            )}
            
            <div className="flex items-center justify-between gap-2 mt-2">
              <button 
                onClick={openFileDialog}
                className={`flex items-center gap-1 px-2 py-1.5 rounded-xl text-xs font-medium border-2 transition-colors duration-300 ${
                  isDarkMode 
                    ? 'bg-gray-600/80 border-gray-500/50 text-gray-200 hover:bg-gray-500' 
                    : 'bg-gray-100/80 border-gray-300/60 text-gray-700 hover:bg-gray-200'
                }`}
              >
                <Paperclip className="w-3.5 h-3.5" />
                <span className="hidden sm:inline">Attach</span>
              </button>
              <div className="flex items-center gap-2">
                <button 
                  onClick={handleVoiceToggle}
                  className={`w-8 h-8 rounded-full flex items-center justify-center border-2 transition-colors duration-300 ${
                    isRecording 
                      ? 'bg-red-500 text-white border-red-500' 
                      : isDarkMode
                      ? 'bg-gray-600/80 border-gray-500/50 text-gray-200 hover:bg-gray-500'
                      : 'bg-gray-100/80 border-gray-300/60 text-gray-700 hover:bg-gray-200'
                  }`}
                  disabled={!isVoiceSupported}
                  title={!isVoiceSupported ? "Voice recording not supported" : isRecording ? "Stop recording" : "Start recording"}
                >
                  <Mic className="w-4 h-4" />
                </button>
                <button 
                  onClick={handleSendMessage}
                  disabled={isProcessing || (!userInput.trim() && uploadedFiles.length === 0 && !transcript.trim())}
                  className="w-8 h-8 bg-gradient-to-r from-[#88ba82] to-[#95c190] rounded-full flex items-center justify-center hover:from-[#7aa875] hover:to-[#88ba82] transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed transform hover:scale-105"
                  title="Generate AI Health Plan"
                >
                  {isProcessing ? (
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                  ) : (
                    <Activity className="w-4 h-4 text-white" />
                  )}
                </button>
              </div>
            </div>
          </div>

          {/* Hidden file input */}
          <input
            ref={fileInputRef}
            type="file"
            multiple
            accept=".txt,.pdf"
            onChange={(e) => handleFileUpload(e.target.files)}
            className="hidden"
          />
          </div>
        </div>



        {/* Dynamic Health Section - Health Tips, Plans, or Selected Plan Activities */}
        <div className="max-w-md mx-auto px-4 sm:px-6 mt-2">
          {showHealthPlans ? (
            <div className={`py-3 flex-1 shadow-lg rounded-3xl transition-colors duration-300 ${
              isDarkMode ? 'bg-gray-800' : 'bg-white'
            }`}>
              <HealthPlansDisplay
                plans={healthPlans}
                onSelectPlan={handleSelectPlan}
                selectedPlan={selectedPlan}
              />
            </div>
          ) : showGroqPlans ? (
            <div className={`py-3 flex-1 shadow-lg rounded-3xl transition-colors duration-300 ${
              isDarkMode ? 'bg-gray-800' : 'bg-white'
            }`}>
              <TodaySchedule 
                plans={groqPlans}
                showPlans={true}
                onSelectPlan={handleGroqPlanSelect}
                onViewPlanDetails={handleViewPlanDetails}
                sequentialAIResult={sequentialAIResult}
              />
            </div>
          ) : selectedPlan ? (
            <div className={`py-3 flex-1 shadow-lg rounded-3xl transition-colors duration-300 ${
              isDarkMode ? 'bg-gray-800' : 'bg-white'
            }`}>
              <TodaySchedule 
                plan={selectedPlan} 
                onSelectPlan={handleGroqPlanSelect}
                onViewPlanDetails={handleViewPlanDetails}
                sequentialAIResult={sequentialAIResult}
              />
            </div>
          ) : (
            <div className={`py-3 flex-1 shadow-lg rounded-3xl transition-colors duration-300 ${
              isDarkMode ? 'bg-gray-800' : 'bg-white'
            }`}>
              <TodaySchedule 
                sequentialAIResult={sequentialAIResult}
              />
            </div>
          )}
        </div>


        {/* Notification Drawer */}
        {showNotificationDrawer && (
          <div className="fixed inset-0 z-50 bg-black/50" onClick={() => setShowNotificationDrawer(false)}>
            <div className="absolute right-0 top-0 h-full w-80 bg-white dark:bg-gray-800 shadow-xl transform transition-transform duration-300">
              <div className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h3 className={`text-lg font-semibold transition-colors duration-300 ${
                    isDarkMode ? 'text-white' : 'text-gray-900'
                  }`}>
                    Settings & Options
                  </h3>
                  <button
                    onClick={() => setShowNotificationDrawer(false)}
                    className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                  >
                    <X className="w-6 h-6" />
                  </button>
                </div>

                <div className="space-y-4">
                  {/* Dark Mode Toggle */}
                  <div className={`flex items-center justify-between p-4 rounded-lg transition-colors duration-300 ${
                    isDarkMode ? 'bg-gray-700' : 'bg-gray-100'
                  }`}>
                    <div className="flex items-center space-x-3">
                      {isDarkMode ? (
                        <Moon className="w-5 h-5 text-[#88ba82]" />
                      ) : (
                        <Sun className="w-5 h-5 text-yellow-500" />
                      )}
                      <span className={`font-medium transition-colors duration-300 ${
                        isDarkMode ? 'text-gray-200' : 'text-gray-800'
                      }`}>
                        {isDarkMode ? 'Dark Mode' : 'Light Mode'}
                      </span>
                    </div>
                    <button
                      onClick={toggleDarkMode}
                      className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors duration-300 ${
                        isDarkMode ? 'bg-[#88ba82]' : 'bg-gray-300'
                      }`}
                    >
                      <span
                        className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform duration-300 ${
                          isDarkMode ? 'translate-x-6' : 'translate-x-1'
                        }`}
                      />
                    </button>
                  </div>

                  {/* Admin Access */}
                  {user && user.email === 'admin@urcare.com' && (
                    <button
                      onClick={() => navigate('/my-admin')}
                      className={`w-full flex items-center space-x-3 p-4 rounded-lg transition-colors duration-300 ${
                        isDarkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-100 hover:bg-gray-200'
                      }`}
                    >
                      <Shield className={`w-5 h-5 ${isDarkMode ? 'text-blue-400' : 'text-blue-600'}`} />
                      <span className={`font-medium transition-colors duration-300 ${
                        isDarkMode ? 'text-gray-200' : 'text-gray-800'
                      }`}>
                        Admin Panel (Charts, Users, Payments, Chat)
                      </span>
                    </button>
                  )}

                  {/* View Plan Details */}
                  {selectedPlan && (
                    <button
                      onClick={handleViewPlanDetails}
                      className={`w-full flex items-center space-x-3 p-4 rounded-lg transition-colors duration-300 ${
                        isDarkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-100 hover:bg-gray-200'
                      }`}
                    >
                      <Eye className="w-5 h-5 text-[#88ba82]" />
                      <span className={`font-medium transition-colors duration-300 ${
                        isDarkMode ? 'text-gray-200' : 'text-gray-800'
                      }`}>
                        View Plan Details
                      </span>
                    </button>
                  )}

                  {/* Activity Overview */}
                  <button
                    onClick={() => navigate('/workout-dashboard')}
                    className={`w-full flex items-center space-x-3 p-4 rounded-lg transition-colors duration-300 ${
                      isDarkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-100 hover:bg-gray-200'
                    }`}
                  >
                    <Activity className="w-5 h-5 text-[#88ba82]" />
                    <span className={`font-medium transition-colors duration-300 ${
                      isDarkMode ? 'text-gray-200' : 'text-gray-800'
                    }`}>
                      Activity Overview
                    </span>
                  </button>
            </div>
          </div>
        </div>
      </div>
        )}

      {/* AI Processing Popup */}
      <AIProcessingPopup
        isOpen={isProcessing}
        isActuallyProcessing={isProcessing}
        onComplete={(result) => {
          // AI processing completed
        }}
        onError={(error) => {
          console.error("AI processing error:", error);
          toast.error("AI processing failed: " + error);
        }}
      />

      {/* Your Health Popup */}
      <YourHealthPopup
        isOpen={showYourHealthPopup}
        onClose={() => setShowYourHealthPopup(false)}
        userProfile={getSafeProfile()}
        healthScore={healthScore}
        selectedPlan={selectedPlan}
      />

      {/* Floating Chat */}
      <FloatingChat />
        </div>
      </ErrorBoundary>
    </UserFlowHandler>
  );
};

export default Dashboard;